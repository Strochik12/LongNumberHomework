#ifndef TESTS_HPP
#define TESTS_HPP

#include <vector>
#include <string>

class Test {
private:
    std::string name;
    std::string a;
    std::string b;
    std::string operation;
    std::string expected_result;
public:
    Test(std::string, std::string, std::string, std::string, std::string);
    void show() const;
    std::string test() const;
    bool compare(std::string) const;
    std::string getName() const;
};

const std::vector<Test> TESTS = {
    {
        "TEST1",
        "1001101.110101",
        "10110.00111",
        "+",
        "1100100.000011"
    },
    {
        "TEST2",
        "101.01010110101",
        "110101.01011111",
        "-",
        "-110000.00001000011"
    },
    {
        "TEST3",
        "101.01010110101",
        "1.0101111100001",
        "*",
        "111.010100011111000000010101"
    },
    {
        "TEST4",
        "10.101011",
        "0.0100111011001",
        "/",
        "1000.1010111010101001001011010110010000111010000101011011101100100110101100000111110100011011000111001111"
    },
    {
        "TEST5",
        "10001101010011.01110101010001110110100010100001",
        "101011101010110.1011101110100101",
        "<",
        "True"
    },
    {
        "TEST6",
        "11.000000011111010101110001111",
        "11.0000000010111011000101110100111101001",
        "<=",
        "False"
    },
    {
        "TEST7",
        "11001.00011010101010011110101010101110100111111111001",
        "11001.00011010101010011110101010101110100111111111001",
        ">",
        "False"
    },
    {
        "TEST8",
        "11001.00011010101010011110101010101110100111111111001",
        "11001.00011010101010011110101010101110100111111111001",
        ">=",
        "True"
    },
    {
        "TEST9",
        "10011110001.01100111011",
        "10011110001.00100111011",
        "==",
        "False"
    },
    {
        "TEST10",
        "34.0151239",
        "",
        "operator ''_ln",
        "100010.000000111101"
    }
    };

#endif